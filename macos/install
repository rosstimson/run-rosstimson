#!/bin/sh

set -e

main() {
	install_homebrew
	brew_up
	config_sudo
	directories
	#fix_tilde_key
	emacs_service
	fix_zsh
	hunspell_dictionaries
	dotfiles
	gpg_config_and_keys
	dev
}


install_homebrew() {
	if [ ! -x /opt/homebrew/bin/brew ]; then
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	fi
}


# Install packages and apps with Homebrew
brew_up() {
	cd /tmp \
		&& curl -SsO https://ross.run/macos/Brewfile \
		&& brew bundle --file /tmp/Brewfile
}


# Configure my user for sudo without a password
config_sudo() {
	cat <<- EOF | sudo tee /etc/sudoers.d/rosstimson
		rosstimson	 ALL=(ALL) NOPASSWD:ALL
	EOF
}


# Don't like the way the tilde key is bottom left on UK model MacBooks
# so remap it to top left where it usually lives.
#
# There is no easy way to do this in System Prefs or somewhere like
# that so fix is from here:
# https://bezdelev.com/hacking/fix-tilde-key-mac/
#
# However, using the hidutil command works only for the current
# session and the key will reset back to old location upon reboot,
# create a launchd service that runs the command at system boot to
# persist the change.
fix_tilde_key() {
	cat <<- EOF | tee ~/Library/LaunchAgents/local.remap-tilde.plist
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd >
		<plist version="1.0">
		<dict>
			<key>Label</key>
			<string>local.remap-tilde</string>
			<key>ProgramArguments</key>
			<array>
				<string>/usr/bin/hidutil</string>
				<string>property</string>
				<string>--set</string>
				<string>{"UserKeyMapping": [{"HIDKeyboardModifierMappingSrc": 0x700000064, "HIDKeyboardModifierMappingDst": 0x700000035}, {"HIDKeyboardModifierMappingSrc": 0x700000035, "HIDKeyboardModifierMappingDst": 0x700000064}]}</string>
			</array>
			<key>RunAtLoad</key>
			<true/>
			<key>KeepAlive</key>
			<false/>
			<key>AbandonProcessGroup</key>
			<true/>
		</dict>
		</plist>
	EOF
}


# Use launchd to start Emacs as a service so I can quickly use it via emacsclient.
emacs_service() {
  # When using the emacs-plus homebrew package it has an included way to easily
  # run Emacs as a service.
  brew services start d12frosted/emacs-plus/emacs-plus@28

  # If not using the emacs-plus package from Homebrew you can configure launchd
  # service like so:

	# cat <<- EOF | tee ~/Library/LaunchAgents/local.emacs.plist
	# 	<?xml version="1.0" encoding="UTF-8"?>
	# 	<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
	# 	<plist version="1.0">
	# 		<dict>
	# 			<key>KeepAlive</key>
	# 			<true/>
	# 			<key>Label</key>
	# 			<string>local.emacs</string>
	# 			<key>ProgramArguments</key>
	# 			<array>
	# 				<string>/usr/local/bin/emacs/emacs</string>
	# 				<string>--fg-daemon</string>
	# 			</array>
	# 			<key>RunAtLoad</key>
	# 			<true/>
	# 			</dict>
	# 	</plist>
	# EOF
}


# Because of the way Homebrew makes your user the owner of stuff in
# /usr/local zsh will complain about permissions with an error like:
#
# zsh compinit: insecure directories, run compaudit for list.
# Ignore insecure directories and continue [y] or abort compinit [n]? ncompinit: initialization aborted
#
# To fix the error you remove write permissions for the group.
fix_zsh() {
	sudo chmod -R 755 /usr/local/share/zsh
	sudo chown -R $(whoami):admin /usr/local/share/zsh
}


hunspell_dictionaries() {
	cd ~/Library/Spelling/ \
	   && curl -SsO https://cgit.freedesktop.org/libreoffice/dictionaries/tree/en/en_GB.aff \
	   && curl -SsO https://cgit.freedesktop.org/libreoffice/dictionaries/tree/en/en_GB.dic
}


# Create directories I normally have.
directories() {
	mkdir -p ~/{org,sites,src,sync}
	mkdir -p ~/Pictures/{screenshots,wallpapers}
	mkdir -p ~/code/{clojure,go,python,rust,shell,terraform,javascript,java}

	# The dir for user services/daemons, it doesn't exist by default.
	mkdir -p ~/Library/LaunchAgents

	# Setup dir and symlink for using 1Password for SSH, see the docs
	# linked below and confing in ~/.ssh/config.
	# https://developer.1password.com/docs/ssh/get-started/#step-3-turn-on-the-1password-ssh-agent
	mkdir -p ~/.1password && \
		ln -s ~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock ~/.1password/agent.sock
}


dotfiles() {
	# Add Github to known hosts.  Ensure the known_hosts file exists first of all.
	touch ~/.ssh/known_hosts

	if ! grep -Fq 'github.com' ~/.ssh/known_hosts; then
	   echo 'github.com,140.82.121.3,140.82.121.4 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
	fi

	# Clone dotfiles from Github if the directory is not present.
	# Just assume that if already cloned that dotfiles have already been installed.
	if [ ! -d ~/.dotfiles ]
	then
		git clone git@github.com:rosstimson/dotfiles.git ~/.dotfiles
		# Install dotfiles
		cd ~/.dotfiles && just install
	fi
}


# Do this after dotfiles as dotfiles includes GPG config.
gpg_config_and_keys() {
	# Ensure my ~/.gnupg dir has the correct permissions otherwise it will error.
	chmod 700 ~/.gnupg

	# Import my public key if it is not already present.
	gpg --keyserver pool.sks-keyservers.net --recv-keys 0x667A3481E4BB34F3

	# Emacs fails to install some things cos a GPG ELPA Signing key is
	# missing, get the following key to fix:
	gpg --keyserver pool.sks-keyservers.net --recv-keys 0x066DAFCB81E42C40
}


dev() {
	# Install some essential Python tools
	pip3 install --user -U pipx poetry proselint python-language-server pyls-black pre-commit

	# Install some JavaScript essential tools
	yarn global add eslint typescript-language-server typescript
}


# GO!!!  Provision this bad lad.
main
